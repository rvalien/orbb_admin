[tool:pytest]
python_files = test_*.py
python_functions = test_*
python_classes = *Test Test*
filterwarnings =
    ignore::DeprecationWarning
    ignore::FutureWarning
log_level = INFO
markers =
    freeze_time: pytest-freezegun
addopts = --suppress-no-test-exit-code

[flake8]
max-line-length = 120
max-complexity = 20
show-source = true
exclude =
    __init__.py
    .git
    .venv
    */db/versions
enable-extensions = G

ignore =
    E203 ; whitespace before ':'
    E231 ; whitespace before ':'
    C901 ; 'NumeralNormalizer.normalize_numbers_by_tokens' is too complex (21)
    W503 ; line break before binary operator
    A003 ; XXX is a python builtin, consider renaming the class attribute
    A001 ; "id" is a python builtin and is being shadowed, consider renaming the variable
    N805 ; first argument of a method should be named 'self'
    PT004 ; fixture does not return anything, add leading underscore
    PT011 ; set the match parameter in pytest.raises(ValueError)
    PT012 ; pytest.raises() block should contain a single simple statement
    PT019 ; fixture ... without value is injected as parameter, use @pytest.mark.usefixtures instead
    PT023 ; use @pytest.mark
    D100 ; Missing docstring in public module
    D101 ; Missing docstring in public class
    D102 ; Missing docstring in public method
    D103 ; Missing docstring in public function
    D104 ; Missing docstring in public package
    D105 ; Missing docstring in magic method
    D106 ; Missing docstring in public nested class
    D107 ; Missing docstring in __init__
    D205 ; 1  blank line required between summary line and description
    D210 ; No whitespaces allowed surrounding docstring text
    D401 ; First line should be in imperative mood; try rephrasing
    C408 ; Unnecessary dict call - rewrite as a literal
    PT018 ; assertion should be broken down into multiple parts
    PT019 ; fixture <FIXTURE> without value is injected as parameter
    F821 ;
    PT006 ; wrong name(s) type in @pytest.mark.parametrize, expected tuple
    PT007 ; wrong values type in @pytest.mark.parametrize, expected list of tuples
    IF100 ; don`t use "[on_true] if [expression] else [on_false]" syntax
    PT014 ; found duplicate test cases (5, 8) in @pytest.mark.parametrize
    G200 ; Logging statement uses exception in arguments
    R504 ; you shouldn`t assign value to variable if it will be use only as return value

per-file-ignores =
    wizard/admin/views/**.py:E800, A002
    __init__.py:F401
    guldan/guldan/pages/*/locators.py:N802

[isort]
multi_line_output=3
include_trailing_comma=True
force_grid_wrap=0
use_parentheses=True
line_length=120
balanced_wrapping = true
default_section = THIRDPARTY
known_first_party = admin,db,api
skip = __init__.py
